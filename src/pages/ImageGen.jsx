import React, { useState } from "react";
import ShareIcon from '@mui/icons-material/Share';
import FileDownloadIcon from '@mui/icons-material/FileDownload';
import { CircularIndeterminate } from "../components/loadanimation";
import { auth } from "../firebase";
import { db } from "../firebase";
import { storage } from "../firebase";
import { getDownloadURL, ref, uploadBytes } from 'firebase/storage';
import { v4 } from 'uuid';
import { collection, addDoc } from 'firebase/firestore';
import {useAuthState} from "react-firebase-hooks/auth"

const API_TOKEN = "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";

const ImageGen = () => {
  const [loading, setLoading] = useState(false);
  const [output, setOutput] = useState(null);
  const [prompt, setPrompt] = useState("")
  const [imageFile, setImageFile] = useState(null);

  const [user] = useAuthState(auth) 
  const postRef = collection(db, "posts")

  const uploadImage = async () =>{
    if(imageFile !== null){
      const imageRef = ref(storage, `images/${imageFile.name + v4()}`)
      uploadBytes(imageRef, imageFile)
      .then(()=>{
        getDownloadURL(imageRef)
        .then((url)=>{
          if(prompt !== ""){
            addDoc(postRef, {
              prompt: prompt,
              image: url,
              user: user.displayName,
              logo: user.photoURL,
            })
            .then(res=>alert("posted"))
            .catch(err=>console.log(err))
          }
        })
      })
      .catch(err=>console.log(err))
    }

  }

  const handleCopyToClipboard = () => {
    if (output) {
      navigator.clipboard.writeText(output)
        .then(() => alert('Image URL copied to clipboard'))
        .catch((error) => console.error('Error copying to clipboard:', error));
    } else {
      alert('Cannot copy to clipboard. Please generate an image first.');
    }
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);

    const input = event.target.elements.input.value;
    setPrompt(input)
    const response = await fetch(
      // "https://api-inference.huggingface.co/models/CompVis/stable-diffusion-v1-4"
         "https://api-inference.huggingface.co/models/dataautogpt3/OpenDalle"
        // "https://api-inference.huggingface.co/models/runwayml/stable-diffusion-v1-5"
        ,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${API_TOKEN}`,
        },
        body: JSON.stringify({ inputs: input }),
      }
    );

    if (!response.ok) {
      throw new Error("Failed to generate image");
    }

    const blob = await response.blob();
    setOutput(URL.createObjectURL(blob));
    setImageFile(new File([blob], "art.png", { type: "image/png" }));
    setLoading(false);
  };

  const handleDownload = () => {
    const link = document.createElement("a");
    link.href = output;
    link.download = "art.png";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <section className="text-gray-400 pb-8 bg-gray-900 body-font w-screen  overflow-hidden m-0 p-0">
      <div className="container px-5 py-24 mx-auto mt-7  bg-gradient-to-r from-blue-900 to-purple-900 rounded-lg shadow-lg">
        <div>
          <h1 className="font-extrabold text-5xl mb-2">Prompt Your Creativity!</h1>
          <p className="mt-2 text-[#666e75] text-[14px] max-w-[500px]">Browse through a collection of imaginative and visually stunning images generated by DALL-E AI</p>
        </div>
        <div className="imageGen flex flex-col md:flex-row items-center">
          <form className="generate-form mt-2 md:mr-4" onSubmit={handleSubmit}>
            <input type="text" name="input" placeholder="Type your prompt here..." className="bg-black-200/70 text-black border drop-shadow-sm shadow-gray-700 rounded-2xl placeholder-slate-400 px-4 py-1 focus:outline-none mb-2 md:mb-0" />
            <button type="submit" className="button p-1 m-2 rounded-2xl text-white bg-blue-500 px-4 font-semibold hover:bg-blue-900 hover:transform ease-in-out duration-300">Generate</button>
          </form>
          {loading && <div className="loading pt-10 md:pt-0 px-4"><p className="pl-4"><CircularIndeterminate /></p></div>}
          {!loading && output && (
            <div className="result-image pt-4 w-full md:w-auto">
              <img src={output} alt="art" className="max-w-full h-auto rounded-md" />
              <div className="action pt-5 flex justify-around pl-4 w-full">
                <button className="bg-blue-500 text-white rounded-2xl px-4 py-2 font-semibold hover:bg-blue-900 hover:transform ease-in-out duration-300" onClick={handleDownload}><FileDownloadIcon className="mr-2" />Download</button>
                {user && <button className="bg-blue-500 text-white rounded-2xl px-4 py-2 font-semibold hover:bg-blue-900 hover:transform ease-in-out duration-300" onClick={uploadImage}><ShareIcon className="mr-2" />Share</button>}
                <button className="bg-blue-500 text-white rounded-2xl px-4 py-2 font-semibold hover:bg-blue-900 hover:transform ease-in-out duration-300" onClick={handleCopyToClipboard}>Copy URL</button>
              </div>
            </div>
          )}
        </div>
      </div>
    </section>
   );
  
};

export default ImageGen;